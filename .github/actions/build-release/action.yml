name: build-release

inputs:
  git_tag:
    description: name of the release tag
    required: true

description: |
  Set the version in the version file
  Add necessary files to zip file.
runs:
  using: "composite"
  steps:
    - id: get-nonlatest-git-tag
      shell: bash
      env:
        git_tag: ${{ inputs.git_tag }}
      run: |
        # Show running through script
        set -euxo pipefail
        # Get git commit id
        commit_id="$(git show-ref --tags "${git_tag}" | {
                     cut -d' ' -f1
                    })"
        # Now get git tag from commit id if it isn't 'latest'
        git_tag_non_latest="$(git show-ref | {
                              # Collect the tags on the commit id connected to 'latest'
                              grep "${commit_id}"
                             } | {
                              # Filter out heads/remotes, only want the tags
                              grep "refs/tags"
                             } | {
                              # Filter out 'latest' tag, should just be the release left
                              grep -v "refs/tags/latest"
                             } | {
                              # Now get the name of the release
                              cut -d' ' -f2
                             })"
        git_tag_non_latest="$(basename "${git_tag_non_latest}")"
        # Set git tag as output for this step
        echo "::set-output name=git_tag_non_latest::${git_tag_non_latest}"
    - id: build-release
      shell: bash
      env:
        NON_LATEST_KISS_MY_RC_VERSION: ${{ steps.get-nonlatest-git-tag.outputs.git_tag_non_latest }}
      run: |
        # Show running of script
        set -euxo pipefail
        
        # Install commands
        sudo apt-get update -y -qq
        sudo apt-get install -y -qq \
          rsync \
          zip
        
        # Create release dir
        mkdir -p "kiss-my-rc-${{ inputs.git_tag }}"
        
        # Add elements
        rsync --archive \
          "src/elements/" "kiss-my-rc-${{ inputs.git_tag }}/elements/"
        
        # Add modules
        rsync --archive \
          "modules/" "kiss-my-rc-${{ inputs.git_tag }}/modules/"
        
        # Add source_this.sh from templates to all elements
        for i in $(find kiss-my-rc-${{ inputs.git_tag }}/elements/ -mindepth 1 -maxdepth 1 -type d -printf "%f\n"); do
          cp "src/template/source_this.sh" kiss-my-rc-${{ inputs.git_tag }}/elements/$i/source_this.sh
        done
        
        # Convert helper scripts to executables
        for i in $(find ~/.kiss-my-rc/elements/ -mindepth 2 -maxdepth 2 -type d -name 'autocompletions' ); do
          for j in $(find "$i" -mindepth 1 -maxdepth 1 -type d -name 'helper-scripts'); do
            for k in $(find "$j" -mindepth 1 -maxdepth 1 -type f -name '*.sh'); do
              chmod +x "$k"
            done
          done
        done
        
        # Copy over installation script
        rsync --archive \
          "src/install.sh" "kiss-my-rc-${{ inputs.git_tag }}/install.sh"
                
        # Make install.sh an executable
        chmod +x "kiss-my-rc-${{ inputs.git_tag }}/install.sh"
        
        # Copy over the profile shell script
        rsync --archive \
          "src/profile.sh" "kiss-my-rc-${{ inputs.git_tag }}/profile.sh"
        
        # Create zip file
        zip -q -r "kiss-my-rc-${{ inputs.git_tag }}.zip" "kiss-my-rc-${{ inputs.git_tag }}"